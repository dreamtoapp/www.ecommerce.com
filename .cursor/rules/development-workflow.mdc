---
description: 
globs: 
alwaysApply: true
---
# Development Workflow Rules

## ðŸ§  AI Helper Instructions

AI should:
- Write full components when asked
- Suggest best practices (clean code, SOLID)
- Refactor when code grows large or repetitive
- Name functions clearly and semantically
- Always write minimal, readable code (no bloat)

## ðŸ“š Official Documentation

Follow the **latest official documentation** and **best practices** from:

- ðŸ”— [Next.js Documentation](mdc:https:/nextjs.org/docs) â€” App Router, Server Components, Metadata, SEO, Performance
- ðŸ”— [React Docs (Beta)](mdc:https:/react.dev) â€” Hooks, Server/Client components, Concurrent rendering
- ðŸ”— [Prisma Docs](mdc:https:/www.prisma.io/docs) â€” MongoDB setup, relationships, and type-safety
- ðŸ”— [Tailwind CSS Docs](mdc:https:/tailwindcss.com/docs) â€” Responsive-first styling, RTL support
- ðŸ”— [shadcn/ui Docs](mdc:https:/ui.shadcn.com/docs) â€” Best practices for modern UI components
- ðŸ”— [Zod Docs](mdc:https:/zod.dev) â€” Schema validation and type inference
- ðŸ”— [React Hook Form Docs](mdc:https:/react-hook-form.com) â€” Form performance, validation, accessibility
- ðŸ”— [NextAuth Docs](mdc:https:/next-auth.js.org) â€” Secure and scalable authentication
- ðŸ”— [next-intl Docs](mdc:https:/next-intl-docs.vercel.app) â€” Multilingual support for App Router with RTL handling

## ðŸ”„ Development Process

- Start with server components by default
- Use client components only when necessary
- Implement proper error handling from the start
- Write clean, maintainable code
- Follow the established project structure

## ðŸŽ¯ Code Quality

- Use TypeScript strictly (no any/unknown)
- Implement proper error boundaries
- Write testable, modular code
- Keep functions small and focused
- Use meaningful variable and function names

