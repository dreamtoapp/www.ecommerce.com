Here's a streamlined checklist format for quick reference (for you **and** AI assistants):

---

### **Code Quality Checklist** ‚úÖ‚ùå  
*(Mark items as you review)*

1. **Function Structure**  
   ‚úÖ Split into focused functions (1 task = 1 function)  
   ‚úÖ Max 30 lines per function  
   ‚úÖ No nested promise chains  

2. **Naming Convention**  
   ‚úÖ No single-letter variables (e.g., `user` not `u`)  
   ‚úÖ Functions use verb-noun format (`calculateRevenue`)  
   ‚úÖ Booleans start with "is/has" (`isValidOrder`)  

3. **Async Efficiency**  
   ‚úÖ Independent `await` calls wrapped in `Promise.all`  
   ‚úÖ No sequential awaits for unrelated operations  

4. **Error Handling**  
   ‚úÖ Try/catch in parent functions  
   ‚úÖ Consistent error format (`{ success, data, error }`)  
   ‚úÖ Contextual error messages ("Failed to load orders" not "Error")  

5. **DRY Code**  
   ‚úÖ Repeated logic extracted to utils/helpers  
   ‚úÖ No copy-pasted code blocks (>2 duplicates)  

6. **Type Safety**  
   ‚úÖ No `any` types  
   ‚úÖ Interfaces for complex objects  
   ‚úÖ Zod/data validation in API boundaries  

7. **Data Processing**  
   ‚úÖ `forEach` replaced with `map`/`filter`/`reduce`  
   ‚úÖ No side effects in data transformations  

8. **Readability**  
   ‚úÖ Functions self-document through names  
   ‚úÖ Complex logic has brief inline comments  
   ‚úÖ Consistent indentation (2/4 spaces)  

9. **Interface Stability**  
   ‚úÖ Existing API fields unchanged  
   ‚úÖ New fields marked as optional (`newField?`)  
   ‚úÖ Versioned APIs (`/v1/analytics`)  

---

### **Quick Scan Guide** üîç  
*(For rapid code review)*

**Code Smells** ‚ùå:  
- `let` without clear reason ‚Üí Should be `const`  
- `any` type usage ‚Üí Add proper typing  
- `.then().catch()` chains ‚Üí Convert to async/await  
- Functions > 50 lines ‚Üí Split into sub-functions  
- Multiple `if(!x) return` ‚Üí Use early returns consistently  

**Quality Indicators** ‚úÖ:  
- `Promise.all` for async operations  
- Pure functions (no side effects)  
- Typed function parameters/returns  
- Descriptive variable names (`orderTotal` vs `total`)  
- Unified error responses  

---

### **Implementation Steps**  
1. Paste code + this checklist to AI with:  
   *"Review using checklist. Mark ‚úÖ/‚ùå. Explain failures."*  
2. Prioritize ‚ùå items starting with:  
   - Type safety errors  
   - Async inefficiencies  
   - Critical error handling gaps  
3. Batch-similar fixes (e.g., rename all variables first)  

---

### **Example AI Prompt** ü§ñ  
*"Apply checklist to this code. Show ‚ùå violations grouped by priority. Suggest fixes with code examples for top 3 issues."*

--- 

This format helps both humans and AI systematically improve code while maintaining your preferred patterns. Would you like me to create a specific version for React components/API routes/etc.?